{"version":3,"sources":["../../src/index.js"],"names":["InputField","props","state","value","undefined","handleCheckboxChange","bind","handleRadioChange","handlePickerChange","handleFieldChange","renderCheckBox","renderRadio","renderPicker","renderField","input","meta","setState","prevState","onChange","event","newValue","prevValue","name","currentValue","items","map","item","key","label","type","forms","form","formValues","values","renderInput","Component","mapStateToProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field } from 'redux-form';\nimport { Input, Picker, CheckBox, Radio } from 'native-base';\n\nclass InputField extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: undefined\n    };\n\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n    this.handleRadioChange = this.handleRadioChange.bind(this);\n    this.handlePickerChange = this.handlePickerChange.bind(this);\n    this.handleFieldChange = this.handleFieldChange.bind(this);\n\n    this.renderCheckBox = this.renderCheckBox.bind(this);\n    this.renderRadio = this.renderRadio.bind(this);\n    this.renderPicker = this.renderPicker.bind(this);\n    this.renderField = this.renderField.bind(this);\n\n    this.renderField = this.renderField.bind(this);\n  }\n\n  componentWillMount() {\n    // this.props.input.onChange();\n  }\n\n  handleCheckboxChange(input, meta) {\n    this.setState(\n      prevState => ({\n        value: !prevState.value\n      }),\n      () => input.onChange(this.state.value)\n    );\n  }\n\n  handleRadioChange(input, meta) {\n    this.setState(\n      {\n        value: input.value\n      },\n      () => input.onChange(input.value)\n    );\n  }\n\n  handlePickerChange(input, meta, value) {\n    this.setState(\n      {\n        value\n      },\n      () => input.onChange(value)\n    );\n  }\n\n  handleFieldChange(event, newValue, prevValue, name) { }\n\n  renderCheckBox(input, meta) {\n    const { value } = this.state;\n    const { props } = this;\n\n    return (\n      <CheckBox\n        checked={value}\n        onPress={() => this.handleCheckboxChange(input, meta)}\n        {...input}\n        {...props}\n      />\n    );\n  }\n\n  renderRadio(input, meta, currentValue) {\n    const { props } = this;\n\n    return (\n      <Radio\n        {...input}\n        {...props}\n        selected={currentValue === this.state.value}\n        onPress={() => this.handleRadioChange(input, meta)}\n      />\n    );\n  }\n\n  renderInput(input, meta) {\n    const { props } = this;\n\n    return (\n      <Input {...input} {...props} /> \n    );\n  }\n\n  renderPicker(input, meta) {\n    const { items } = this.props;\n    const { value } = this.state;\n\n    return (\n      <Picker\n        selectedValue={value}\n        onValueChange={value => this.handlePickerChange(input, meta, value)}\n        {...this.props}\n      >\n        {items.map(item => (\n          <Picker.Item\n            key={item.key}\n            label={item.label}\n            value={item.value}\n          />\n        ))}\n      </Picker>\n    );\n  }\n\n  renderField({ input, meta, type }) {\n    const { forms } = this.props;\n\n    const form = forms[meta.form];\n    const formValues = form ? form.values : {};\n    const currentValue = formValues ? formValues[input.name] : '';\n\n    switch (type) {\n      case 'checkbox':\n        return this.renderCheckBox(input, meta);\n      case 'radio':\n        return this.renderRadio(input, meta, currentValue);\n      case 'select':\n        return this.renderPicker(input, meta);\n      default:\n        return this.renderInput(input, meta);\n    }\n  }\n\n  render() {\n    const { name, type, value } = this.props;\n\n    return (\n      <Field\n        name={name}\n        type={type}\n        value={value}\n        component={this.renderField}\n        onChange={this.handleFieldChange}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  forms: state.form\n});\n\nexport default connect(mapStateToProps)(InputField);\n"]}